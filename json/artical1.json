{"articals":[{"title":"简介","img":"../../../img/artical/pic1.png","href":"nisown/nisown-0/0","des":"# NiWeb\r\n\r\n## 主要思想\r\n\r\n   React 以其组件化的思想，为大家提供了良好的编程体验，在我们编写自己的博客时，如果能很好的使用这种编程逻辑，我们就可以写出更加灵活的，可扩展性强的博客。如果你也是这么想的，请和我一起发展这个项目吧。与Hexo相比，React在生成静态界面的同时，保留了react 特有的虚拟dom 和 diff 算法，让你博客的响应速度出人一等。\r\n\r\n## 主要板块\r\n\r\n    经过作者的长期观察，一般的博客网站可以划分为一下几个结构\r\n    1. 首页\r\n        1.0 导航栏\r\n        1.1 首页的大图，这一部分，往往博主会放一张图片和一些文字，来提升博客整体的丰富度\r\n        1.2 首页的文章列表，文章列表主要是文章的访问数据，标题，描述和配图\r\n        1.3 首页的底部, 在中国的网站至少会有备案信息\r\n    2. 文章展示\r\n\r\n    3. 历史档案\r\n\r\n## 更新说明\r\n\r\n- 2021 年 3 月 7 日：完成前端首页整体布局\r\n    ![首页整体布局](../../../img/ar","commend":0,"watch":0,"evaluate":0,"date":"2022-02-11T09:36:15.355Z"},{"title":"案例","img":"https://octodex.github.com/images/minion.png","href":"nisown/nisown-0/1","des":"---\r\n__Advertisement :)__\r\n\r\n- __[pica](https://nodeca.github.io/pica/demo/)__ - high quality and fast image\r\n  resize in browser.\r\n- __[babelfish](https://github.com/nodeca/babelfish/)__ - developer friendly\r\n  i18n with plurals support and easy syntax.\r\n\r\nYou will like those projects!\r\n\r\n---\r\n\r\n# h1 Heading 8-)\r\n## h2 Heading\r\n### h3 Heading\r\n#### h4 Heading\r\n##### h5 Heading\r\n###### h6 Heading\r\n\r\n\r\n## Horizontal Rules\r\n\r\n___\r\n\r\n---\r\n\r\n***\r\n\r\n\r\n## Typographic replacements\r\n\r\nEnable typographer","commend":0,"watch":0,"evaluate":0,"date":"2022-02-11T09:36:19.543Z"},{"title":"项目结构","img":"","href":"nisown/nisown-0/2","des":"# 项目结构\r\n","commend":0,"watch":0,"evaluate":0,"date":"2022-02-11T09:36:32.621Z"},{"title":"生成","img":"","href":"unity/unity-0/1","des":"# Unity 生成\r\n\r\n## 案例：生成10 个 unity 对象，使用协程\r\n\r\n```c\r\n    void Start()\r\n    {\r\n        StartCoroutine(SpawneEnemy());\r\n    }\r\n\r\n    IEnumerator SpawneEnemy() {\r\n        foreach (Wave wave in waves) {\r\n            for (int i = 0; i < wave.count; i++) {\r\n                // GameObject.Instantiate 接收三个参数， 1. 游戏对象  2. 生成的位置  3. 生成的角度\r\n                GameObject.Instantiate(wave.enemyPrefab, START.position, Quaternion.identity);\r\n                yield return new WaitForSeconds(wave.rate);  // 生产的间隔\r\n     ","commend":0,"watch":0,"evaluate":0,"date":"2022-02-12T08:11:08.451Z"},{"title":"输入输出","img":"","href":"unity/unity-0/0","des":"# 输入输出\r\n\r\n本文将简单描述鼠标、键盘的输入方法，以及输出文本的方法。\r\n\r\n## 前后输入\r\n\r\n```c\r\nfloat h = Input.GetAxis(\"Horizontal\");\r\nfloat v = Input.GetAxis(\"Vertical\");\r\n```\r\n\r\n## 鼠标输入\r\n\r\n```c\r\n\r\n```\r\n\r\n## 输出\r\n","commend":0,"watch":0,"evaluate":0,"date":"2022-02-12T15:16:34.675Z"},{"title":"添加点击事件","img":"../../../img/artical/2022-02-12-23-08-18.png","href":"unity/unity-0/2","des":"# unity 点击事件\r\n\r\n对于 3d 场景下物品的点击，需要使用到射线方法。\r\n\r\n## 多个重复对象的点击方法\r\n\r\n【1. 添加Layer】<br />\r\n给这些重复的物品添加相同的Layer, 这步最好在物品复制之前完成。\r\n![添加layer](../../../img/artical/2022-02-12-23-08-18.png)\r\n\r\n```c\r\nprivate void Update()\r\n{\r\n    if (Input.GetMouseButtonDown(0)) {\r\n        if (EventSystem.current.IsPointerOverGameObject() == false) {\r\n            Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);\r\n            RaycastHit hit;\r\n            bool isCollider = Physics.Raycast(ray,out hit,  1000, LayerMask","commend":0,"watch":0,"evaluate":0,"date":"2022-02-12T15:24:15.758Z"}]}