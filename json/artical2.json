{"articals":[{"title":"DETR","img":"../../../img/artical/2022-03-11-16-20-09.png","href":"ai/ai-5/0","des":"# DETR\r\n\r\n## 信息\r\n\r\nEnd-to-End Object Detection with Transformers\r\n[https://arxiv.org/abs/2005.12872](https://arxiv.org/abs/2005.12872)\r\n\r\n\r\n## 创新\r\nDETR提出使用transformer，学习固定个数目标编码作为解码器的Q，来去除非极大化抑制的影响。具体来说首先使用CNN提取特征，然后将特征输入transformer的编码层，得到解码器的K和V，之后传入解码器，结合目标编码，产生解码结果，后通过MLP，映射到每一个对象的类别和边界框。和Faster RCNN转化为Mask RCNN一样，加入了mask head的DETR实现了分割任务。\r\n![](../../../img/artical/2022-03-11-16-20-09.png)\r\n\r\n## 详情\r\n![](../../../img/artical/2022-03-11-16-05-44.png)\r\n\r\n使用DETR进行实例分割\r\n![](../../../img/artical/20","commend":0,"watch":0,"evaluate":0,"date":"2022-03-12T05:58:05.193Z"},{"title":"Queryinst","img":"","href":"ai/ai-5/1","des":"","commend":0,"watch":0,"evaluate":0,"date":"2022-03-11T08:32:17.267Z"},{"title":"SGN","img":"../../../img/artical/2022-03-09-17-42-40.png","href":"ai/ai-2/4","des":"# SGN\r\n\r\n## 信息\r\n\r\n文章标题：SGN: Sequential Grouping Networks for Instance Segmentation\r\n文章链接：[https://link.springer.com/chapter/10.1007/978-3-319-46466-4_32](https://link.springer.com/chapter/10.1007/978-3-319-46466-4_32)\r\n\r\n\r\n## 背景\r\n\r\n1. 绝大多数的实力分割模型都是 “两阶段” 的，也就是先进行目标检测，再进行语义分割。也有使用了多边形边界`polygon`的方法进行实例分割的，这种方法无法对中空实例进行正确分割。\r\n\r\n2. 很多自下而上的网络无法完成对遮挡对象进行正确的分割。\r\n![](../../../img/artical/2022-03-09-17-42-40.png)\r\n\r\n## 创新点简介\r\n本文提出了序列分组网络(SGN)来解决对象实例的分割问题。先训练分类网络，将每个像素分为了前景，背景，是否是边缘，对于边缘节点，又被分为了上下左右四种边沿，","commend":0,"watch":0,"evaluate":0,"date":"2022-03-09T14:28:15.888Z"},{"title":"InstanceFCN","img":"../../../img/artical/2022-03-07-22-06-33.png","href":"ai/ai-2/2","des":"# InstanceFCN\r\n\r\n## 信息\r\n\r\n文章标题：Instance-sensitive Fully Convolutional Networks\r\n文章链接：[https://link.springer.com/chapter/10.1007/978-3-319-46466-4_32](https://link.springer.com/chapter/10.1007/978-3-319-46466-4_32)\r\n\r\n## 背景\r\n对于以往的图像分割模型，由于卷积具有<font color=\"red\">位置的不敏感性</font>（对于相同的事物，在图像中处于不同的位置，卷积核的输出相同），导致了当两个相似的事物靠近时很难通过卷积来加以区分。\r\n\r\n## 创新点简介\r\n本文使用全卷积神经网络构建端到端的实例分割模型，它只分割每个实例，没有对实例进行分类。基于语义分割的模型，只有一种语义信息，如果两个实例距离贴就无法区分个体。这是由于卷积具有位置不变性造成的，作者使用滑动窗口，将窗口划分为9个小格（编号为1-9），每个格子代表了像素处于不同的位置，窗口滑动时，像素会被分到不同","commend":0,"watch":0,"evaluate":0,"date":"2022-03-09T09:34:04.428Z"},{"title":"容器操作","img":"","href":"docker/docker-0/3","des":"# 容器操作 \r\n什么是容器：容器不同于镜像，是镜像的一次运行。这里的镜像有点类似于java里的类，而容器则是类实例化的对象。\r\n\r\n## 创建容器\r\n```shell\r\ndocker run [OPTIONS] imageName\r\n# -- name= \"Name\"  容器名字 比如tomcat0， tomcat1，用来区分容器\r\n# -d               后台使用\r\n# -it              使用交互的方式运行，启动并进入容器\r\n# -p               指定容器端口 -p 8080：8080\r\n#                      -p ip:主机端口:容器端口\r\n#                      -p 主机端口:容器端口\r\n#                      -p 容器端口\r\n# -P               （P是大写）随机指定端口\r\n```\r\n【example】\r\n```shell\r\ndocker run -it centos /bin/bash  # 启动并进入centos 容器\r\n# 如果使用 do","commend":0,"watch":0,"evaluate":0,"date":"2022-03-09T03:29:30.232Z"},{"title":"状态查询","img":"","href":"docker/docker-0/1","des":"# 【docker】查询命令\r\n\r\n## 常用命令\r\n|命令功能|命令|\r\n| --- | --- |\r\n| docker 配置信息 | docker info |\r\n| docker 版本 | docker version |\r\n| docker 版主 | docker 命令 --help |\r\n| 镜像列表 | docker images |\r\n| 镜像搜索 | docker search 镜像名 |\r\n| 正在运行 | docker ps |\r\n| 容器日志 | docker logs |\r\n\r\n\r\n## 常用位置\r\n【docker 配置文件】`/etc/docker/daemon.json`\r\n\r\n\r\n## 详情\r\n\r\n### docker images\r\n\r\n```shell\r\ndocker images -a  # 查看全部\r\ndocker images -q  # 查看id\r\ndocker images -aq # 查看全部id\r\n``` \r\n\r\n## docker ps\r\n```shell\r\ndocker ps [OPTIONS]\r\n# -a     查看全部现运行 +","commend":0,"watch":0,"evaluate":0,"date":"2022-03-09T03:29:27.645Z"},{"title":"镜像操作","img":"","href":"docker/docker-0/2","des":"# docker 镜像使用 \r\n\r\n## 运行镜像\r\ndocker run 指令\r\n1. DockerServer会一直在后台运行，等待着客户端的命令\r\n2. 通过守护进程对容器进行操作\r\n\r\n<pre><embed type=\"image/svg+xml\" src=\"../../../img/artical/docker-architecture.svg\" /></pre>\r\n\r\n\r\n```shell\r\ndocker run [OPTIONS] imageName\r\n# -- name= \"Name\"  容器名字 比如tomcat0， tomcat1，用来区分容器\r\n# -d               后台使用\r\n# -it              使用交互的方式运行，启动并进入容器\r\n# -p               指定容器端口 -p 8080：8080\r\n#                      -p ip:主机端口:容器端口\r\n#                      -p 主机端口:容器端口\r\n#                      -p 容器端口\r\n","commend":0,"watch":0,"evaluate":0,"date":"2022-03-09T02:38:08.684Z"},{"title":"安装","img":"","href":"docker/docker-0/0","des":"# Docker安装\r\n\r\n## Docker的意义\r\n\r\n传统的虚拟机存在着一些弊病。\r\n\r\n1. 虚拟机主体庞大：有时甚至大于你要在虚拟机上运行的应用。\r\n2. 启动时间长：虚拟机启动需要走完整的linux启动流程。\r\n3. 结构冗余：如果需要使用多个虚拟机，则其中操作系统部分虽然是一样的，但是也要单独运行。\r\n   \r\ndocker 提出了一整套的解决方案来优化和解决了这些问题\r\n1. 虚拟机主体庞大：docker 可以直接使用宿主机的操作系统，每一个docker只提供运行的必要库和应用。\r\n2. 启动时间长：由于宿主机的操作系统已被加载，所以启动docker没有启动虚拟机时加载linux的流程。\r\n3. 结构冗余：docker 将每个运行时环境进行拆分，一个docker可以运行多个依赖，而依赖之间也可以共享，解决了结构冗余的问题。\r\n\r\n> 参考地址 [https://docs.docker.com/engine/install/centos/](https://docs.docker.com/engine/install/centos/)\r\n\r\n<br>\r\n\r\n## dock","commend":0,"watch":0,"evaluate":0,"date":"2022-03-09T01:34:25.540Z"},{"title":"面试","img":"../../../img/artical/container_vs_vm.png","href":"docker/docker-0/4","des":"# 面试知识点\r\n\r\n## 为什么docker 运行的速度会快\r\n![](../../../img/artical/container_vs_vm.png)\r\n1. docker是os的虚拟化，而VM是硬件层的虚拟化，docker 没有了Hpyevisor（一种运行在基础物理服务器和操作系统之间的中间软件层，可允许多个操作系统和应用共享硬件）\r\n2. docker 与虚拟机相比有更少的抽象层。\r\n3. 虚拟机启动需要重新加载操作系统，而docker可以直接使用宿主机的操作系统。","commend":0,"watch":0,"evaluate":0,"date":"2022-03-09T01:34:22.853Z"},{"title":"FICS","img":"","href":"ai/ai-2/3","des":"","commend":0,"watch":0,"evaluate":0,"date":"2022-03-08T10:59:51.021Z"}]}