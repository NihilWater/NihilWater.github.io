{"articles":[{"title":"WinSCP","img":"","href":"env/env-2/2","des":"# WinSCP\r\n\r\nWinSCP是一个Windows环境下使用SSH的开源图形化SFTP客户端。同时支持SCP协议。它的主要功能就是在本地与远程计算机间安全的复制文件。.winscp也可以链接其他系统,比如linux系统。\r\n\r\n","commend":0,"watch":0,"evaluate":0,"date":"2022-04-16T15:22:36.135Z"},{"title":"安装","img":"","href":"docker/docker-0/0","des":"# Docker安装\r\n\r\n## Docker的意义\r\n\r\n传统的虚拟机存在着一些弊病。\r\n\r\n1. 虚拟机主体庞大：有时甚至大于你要在虚拟机上运行的应用。\r\n2. 启动时间长：虚拟机启动需要走完整的linux启动流程。\r\n3. 结构冗余：如果需要使用多个虚拟机，则其中操作系统部分虽然是一样的，但是也要单独运行。\r\n   \r\ndocker 提出了一整套的解决方案来优化和解决了这些问题\r\n1. 虚拟机主体庞大：docker 可以直接使用宿主机的操作系统，每一个docker只提供运行的必要库和应用。\r\n2. 启动时间长：由于宿主机的操作系统已被加载，所以启动docker没有启动虚拟机时加载linux的流程。\r\n3. 结构冗余：docker 将每个运行时环境进行拆分，一个docker可以运行多个依赖，而依赖之间也可以共享，解决了结构冗余的问题。\r\n\r\n> 参考地址 [https://docs.docker.com/engine/install/centos/](https://docs.docker.com/engine/install/centos/)\r\n\r\n<br>\r\n\r\n## dock","commend":0,"watch":0,"evaluate":0,"date":"2022-04-16T15:22:36.134Z"},{"title":"状态查询","img":"","href":"docker/docker-0/1","des":"# 【docker】查询命令\r\n\r\n## 常用命令\r\n|命令功能|命令|\r\n| --- | --- |\r\n| docker 配置信息 | docker info |\r\n| docker 版本 | docker version |\r\n| docker 版主 | docker 命令 --help |\r\n| 镜像列表 | docker images |\r\n| 镜像搜索 | docker search 镜像名 |\r\n| 正在运行 | docker ps |\r\n| 容器日志 | docker logs |\r\n\r\n\r\n## 常用位置\r\n【docker 配置文件】`/etc/docker/daemon.json`\r\n\r\n\r\n## 详情\r\n\r\n### docker images\r\n\r\n```shell\r\ndocker images -a  # 查看全部\r\ndocker images -q  # 查看id\r\ndocker images -aq # 查看全部id\r\n``` \r\n\r\n## docker ps\r\n```shell\r\ndocker ps [OPTIONS]\r\n# -a     查看全部现运行 +","commend":0,"watch":0,"evaluate":0,"date":"2022-04-16T15:22:36.134Z"},{"title":"镜像操作","img":"","href":"docker/docker-0/2","des":"# docker 镜像使用 \r\n\r\n## 运行镜像\r\ndocker run 指令\r\n1. DockerServer会一直在后台运行，等待着客户端的命令\r\n2. 通过守护进程对容器进行操作\r\n\r\n<pre><embed type=\"image/svg+xml\" src=\"../../../img/article/docker-architecture.svg\" /></pre>\r\n\r\n\r\n```shell\r\ndocker run [OPTIONS] imageName\r\n# -- name= \"Name\"  容器名字 比如tomcat0， tomcat1，用来区分容器\r\n# -d               后台使用\r\n# -it              使用交互的方式运行，启动并进入容器\r\n# -p               指定容器端口 -p 8080：8080\r\n#                      -p ip:主机端口:容器端口\r\n#                      -p 主机端口:容器端口\r\n#                      -p 容器端口\r\n","commend":0,"watch":0,"evaluate":0,"date":"2022-04-16T15:22:36.134Z"},{"title":"容器操作","img":"","href":"docker/docker-0/3","des":"# 容器操作 \r\n什么是容器：容器不同于镜像，是镜像的一次运行。这里的镜像有点类似于java里的类，而容器则是类实例化的对象。\r\n\r\n## 创建容器\r\n```shell\r\ndocker run [OPTIONS] imageName\r\n# -- name= \"Name\"  容器名字 比如tomcat0， tomcat1，用来区分容器\r\n# -d               后台使用\r\n# -it              使用交互的方式运行，启动并进入容器\r\n# -p               指定容器端口 -p 8080：8080\r\n#                      -p ip:主机端口:容器端口\r\n#                      -p 主机端口:容器端口\r\n#                      -p 容器端口\r\n# -P               （P是大写）随机指定端口\r\n```\r\n【example】\r\n```shell\r\ndocker run -it centos /bin/bash  # 启动并进入centos 容器\r\n# 如果使用 do","commend":0,"watch":0,"evaluate":0,"date":"2022-04-16T15:22:36.134Z"},{"title":"面试","img":"../../../img/article/container_vs_vm.png","href":"docker/docker-0/4","des":"# 面试知识点\r\n\r\n## 为什么docker 运行的速度会快\r\n![](../../../img/article/container_vs_vm.png)\r\n1. docker是os的虚拟化，而VM是硬件层的虚拟化，docker 没有了Hpyevisor（一种运行在基础物理服务器和操作系统之间的中间软件层，可允许多个操作系统和应用共享硬件）\r\n2. docker 与虚拟机相比有更少的抽象层。\r\n3. 虚拟机启动需要重新加载操作系统，而docker可以直接使用宿主机的操作系统。","commend":0,"watch":0,"evaluate":0,"date":"2022-04-16T15:22:36.134Z"},{"title":"【有感而发01】怎样才算读好一片论文","img":"","href":"diary/diary-0/1","des":"# 【有感而发01】怎样才算读好一片论文\r\n<font color='gray'>2022-04-12</font>\r\n\r\n&emsp;&emsp;上周粗略的看了大概有24篇的文献，但感觉十分的轻浮。果然，和璇哥讨论时发现自己除了几篇印象深刻的文章以外，根本就讲不出来一片文章的所以然。\r\n\r\n&emsp;&emsp;于是我向璇哥请教，璇哥给我提了两点建议，我觉得挺有道理，有所感悟，所以先把它记下来，就我这忘性，不知道什么时候就想不起来了...\r\n\r\n## 1. 首先要看题目\r\n&emsp;&emsp;一篇好的文章，题目包含了它的主旨和创新。通过阅读标题，要明确作者的创新点，检验自己是否读懂一片文章的关键就是能不能说出题目中创新点的具体做法，能不能在论文的流程图里找到创新点对应的版块。\r\n\r\n## 2. 整理笔记时不要机翻\r\n&emsp;&emsp;机翻只是一种辅助理解的手段，直接使用机器翻译的文章，会破坏原本作者的行文逻辑。\r\n","commend":0,"watch":0,"evaluate":0,"date":"2022-04-16T15:22:36.133Z"},{"title":"BAP_NAL","img":"../../../img/article/2021-11-03-21-39-58.png","href":"ai/ai-10/4","des":"# BAP边界感知池化和NAL感知损失\r\n\r\n## 基础信息\r\n\r\n文章标题：Background-Aware Pooling and Noise-Aware Loss forWeakly-Supervised Semantic Segmentation\r\n\r\n文章链接：[https://arxiv.org/abs/2104.00905](https://arxiv.org/abs/2104.00905)\r\n\r\n发表时间：2021-04-02 (CVPR 2021)\r\n\r\n\r\n## 背景\r\n在使用边界框注释解决了弱监督语义分割（WSSS）的领域中，没有指定对象边界，因此很难训练卷积神经网络 (CNN) 进行语义分割。作者发现模型对边界框内外背景区域的感知具有相似性，这可以用来区分对象边界框内的前景和背景区域。\r\n\r\n## 创新点简介\r\n弱监督语义分割中的背景感知池化和噪声感知损失\r\n\r\n① 提出了BAP（背景感知池）方法，能够在边界框内分辨出前景和背景。具体做法是特征图上，利用边界框外的背景，计算出背景的特征表达。得到背景表达后，可以和边框内特征做相似度，对边界框内的背景和前景进行分割","commend":0,"watch":0,"evaluate":0,"date":"2022-04-16T15:22:36.131Z"},{"title":"【样本间信息学习】RCA","img":"../../../img/article/2022-04-12-16-49-56.png","href":"ai/ai-10/5","des":"# 【样本间信息学习】RCA\r\n\r\n## 基础信息\r\n\r\n文章标题：Regional Semantic Contrast and Aggregation for Weakly Supervised Semantic Segmentation\r\n\r\n文章链接：[https://arxiv.org/abs/2203.09653](https://arxiv.org/abs/2203.09653)\r\n\r\n发表时间：2022-03-22\r\n\r\n\r\n## 背景\r\n\r\n从类别标签中学习语义分割的挑战在于很难从稀疏的类别标签中推断出目标密集的区域掩码。目前这方面的研究都只尝试在一个样本上或者一个样本组中进行，这严重限制了语义分割获取完整的注意力图。\r\n\r\n> Learning semantic segmentation from weakly-labeled (e.g., image tags only) data is challenging since it is hard to infer dense object regions from sparse semantic tags. Desp","commend":0,"watch":0,"evaluate":0,"date":"2022-04-16T15:22:36.131Z"},{"title":"PrototypicalNet","img":"","href":"ai/ai-11/0","des":"# PrototypicalNet\r\n\r\n## 基础信息\r\n\r\n文章标题：Prototypical Networks for Few-shot Learning\r\n\r\n文章链接：[https://arxiv.org/abs/1703.05175](https://arxiv.org/abs/1703.05175)\r\n\r\n发表时间：2017-03\r\n\r\n\r\n## 背景\r\n【度量学习】\r\n\r\n是一种学习两个样本（特征）之间相似性的学习方法。常见的度量有欧式距离、等。以上所提到的度量方法都是不可学习的，度量学习则使用神经网络来训练一个度量函数，这样做可以**对长度不同的片段进行比较**，也可以通过维度扩展的方式，来**寻找更深层次的相似性关系**。\r\n\r\n【度量空间】\r\n\r\n是指度量函数的集合\r\n\r\n【小样本学习】\r\n\r\n通过已经训练好的模型，在其基础之上加入新的分类，并且只有少量样本。在次基础上进行训练，使网络可以泛化到这些样本上。由于样本量很少，在新的类上很容易出先<font color=\"red\">过拟合的现象。</font>\r\n\r\n## 创新点简介\r\n本文使用原型网络`Prototy","commend":0,"watch":0,"evaluate":0,"date":"2022-04-16T15:22:36.131Z"}]}