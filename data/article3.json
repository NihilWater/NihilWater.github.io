{"articles":[{"title":"VMware安装","img":"../../../img/article/2022-04-10-14-30-21.png","href":"env/env-3/1","des":"# 安装错误\r\n\r\n## VMware Workstation and Device/Credential Guard are not compatible. VMware Workstation can be run after disabling Device/Credential Guard.\r\n\r\n![](../../../img/article/2022-04-10-14-30-21.png)\r\n\r\n1. 关闭 Hyper-V\r\n `win11` 使用虚拟机`VMware`是不需要的开启`Hyper-V`的，但是如果遇到了蓝屏错误，需要升级`VMware`\r\n2. 以管理员身份打开命令提示符窗口\r\n运行`bcdedit / enum {current}`\r\n注意，如果需要恢复这种情况，请记下HyperVisorLaunchType\r\n运行 `bcdedit / set hypervisorlaunchtype off` 以禁用管理程序在执行命令后关闭命令提示符并重新启动系统。\r\n","commend":0,"watch":0,"evaluate":0,"date":"2022-04-11T02:24:39.051Z"},{"title":"基础","img":"","href":"env/env-4/0","des":"# Tomcat 基础\r\n\r\nTomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。它是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。由于有了Sun 的参与和支持，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可。\r\n","commend":0,"watch":0,"evaluate":0,"date":"2022-04-11T02:24:39.051Z"},{"title":"安装","img":"../../../img/article/2022-04-10-16-21-29.png","href":"env/env-4/1","des":"# Windows Tomcat 安装\r\n\r\n## 安装 java\r\n\r\n由于`Tomcat`是基于`java`的，所以安装`jdk`是安装`Tomcat`的第一步。对于国内环境来说，`java8`仍然是最常用的，所以连选择环境的考虑都不用考虑了。作者使用的`java8`是免安装的。解压后仍然需要配置环境。以便从中学习配置的细节。\r\n\r\n1. 解压下载的压缩包\r\n2. 配置环境变量\r\n   > JAVA_HOME\r\n\r\n   ![](../../../img/article/2022-04-10-16-21-29.png)\r\n   \r\n   > PATH\r\n   ```txt\r\n   %JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;\r\n   ```\r\n   ![](../../../img/article/2022-04-10-16-25-25.png)\r\n\r\n3. 检测java环境是否正确\r\n   \r\n   使用 `java -version` 来进行判断，如果显示出了结果，则成功了。\r\n\r\n   ![](../../../img/article/2022-0","commend":0,"watch":0,"evaluate":0,"date":"2022-04-11T02:24:39.051Z"},{"title":"容器操作","img":"","href":"docker/docker-0/3","des":"# 容器操作 \r\n什么是容器：容器不同于镜像，是镜像的一次运行。这里的镜像有点类似于java里的类，而容器则是类实例化的对象。\r\n\r\n## 创建容器\r\n```shell\r\ndocker run [OPTIONS] imageName\r\n# -- name= \"Name\"  容器名字 比如tomcat0， tomcat1，用来区分容器\r\n# -d               后台使用\r\n# -it              使用交互的方式运行，启动并进入容器\r\n# -p               指定容器端口 -p 8080：8080\r\n#                      -p ip:主机端口:容器端口\r\n#                      -p 主机端口:容器端口\r\n#                      -p 容器端口\r\n# -P               （P是大写）随机指定端口\r\n```\r\n【example】\r\n```shell\r\ndocker run -it centos /bin/bash  # 启动并进入centos 容器\r\n# 如果使用 do","commend":0,"watch":0,"evaluate":0,"date":"2022-04-11T02:24:39.050Z"},{"title":"面试","img":"../../../img/article/container_vs_vm.png","href":"docker/docker-0/4","des":"# 面试知识点\r\n\r\n## 为什么docker 运行的速度会快\r\n![](../../../img/article/container_vs_vm.png)\r\n1. docker是os的虚拟化，而VM是硬件层的虚拟化，docker 没有了Hpyevisor（一种运行在基础物理服务器和操作系统之间的中间软件层，可允许多个操作系统和应用共享硬件）\r\n2. docker 与虚拟机相比有更少的抽象层。\r\n3. 虚拟机启动需要重新加载操作系统，而docker可以直接使用宿主机的操作系统。","commend":0,"watch":0,"evaluate":0,"date":"2022-04-11T02:24:39.050Z"},{"title":"nvm","img":"","href":"env/env-0/0","des":"\r\n\r\n## NVM 常见命令\r\n```shell\r\nnvm install stable ## 安装最新稳定版 node\r\nnvm install <version> ## 安装指定版本\r\nnvm uninstall <version> ## 删除已安装的指定版本\r\nnvm use <version> ## 切换使用指定的版本node\r\nnvm ls ## 列出所有安装的版本\r\nnvm ls-remote ## 列出所有远程服务器的版本\r\nnvm current ## 显示当前的版本\r\nnvm alias <name> <version> ## 给不同的版本号添加别名\r\nnvm unalias <name> ## 删除已定义的别名\r\nnvm reinstall-packages <version> ## 在当前版本 node 环境下，重新全局安装指定版本号的 npm 包\r\nnvm alias default [node版本号] ##设置默认版本\r\n```\r\n\r\n\r\n## npm 查看所有全局\r\n```shell\r\ncnpm list -g --depth 0\r\n```\r\n\r\n### ","commend":0,"watch":0,"evaluate":0,"date":"2022-04-11T02:24:39.050Z"},{"title":"conda","img":"","href":"env/env-1/0","des":"# conda 安装虚拟环境\r\n\r\n## 介绍\r\nAnaconda提供了在一台机器上执行Python / R数据科学和机器学习的最简单方法。通过使用Anaconda，可以方便的进行python 环境的创建，多版本间python的切换，以及更加简单的pip包安装。\r\n\r\n【意义】多版本python控制让用户在一台电脑上运行多个python环境，防止出现pip包的版本冲突。例如在深度学习任务中，一个常用的pip包叫做`pytorch`, 用户如果想要研究前期使用低版本`pythorch`开发的网络时，而用户电脑上又存在新版本`pytorch`的项目，由于一个python环境只能存在一个`pythorch`包，所以一个解决办法就是安装连个python 环境，而Anaconda就为用户提供了这样的功能，并且可以通过简单的命令进行python 环境的切换。\r\n\r\n## 创建虚拟环境\r\n\r\n可以简单的使用如下的命令来创建一个虚拟环境。\r\n\r\n```shell\r\nconda create -n environment_name python=3.6\r\n```\r\n\r\n如果要将虚拟环境放置到指定位置需要","commend":0,"watch":0,"evaluate":0,"date":"2022-04-11T02:24:39.050Z"},{"title":"安装","img":"","href":"docker/docker-0/0","des":"# Docker安装\r\n\r\n## Docker的意义\r\n\r\n传统的虚拟机存在着一些弊病。\r\n\r\n1. 虚拟机主体庞大：有时甚至大于你要在虚拟机上运行的应用。\r\n2. 启动时间长：虚拟机启动需要走完整的linux启动流程。\r\n3. 结构冗余：如果需要使用多个虚拟机，则其中操作系统部分虽然是一样的，但是也要单独运行。\r\n   \r\ndocker 提出了一整套的解决方案来优化和解决了这些问题\r\n1. 虚拟机主体庞大：docker 可以直接使用宿主机的操作系统，每一个docker只提供运行的必要库和应用。\r\n2. 启动时间长：由于宿主机的操作系统已被加载，所以启动docker没有启动虚拟机时加载linux的流程。\r\n3. 结构冗余：docker 将每个运行时环境进行拆分，一个docker可以运行多个依赖，而依赖之间也可以共享，解决了结构冗余的问题。\r\n\r\n> 参考地址 [https://docs.docker.com/engine/install/centos/](https://docs.docker.com/engine/install/centos/)\r\n\r\n<br>\r\n\r\n## dock","commend":0,"watch":0,"evaluate":0,"date":"2022-04-11T02:24:39.049Z"},{"title":"状态查询","img":"","href":"docker/docker-0/1","des":"# 【docker】查询命令\r\n\r\n## 常用命令\r\n|命令功能|命令|\r\n| --- | --- |\r\n| docker 配置信息 | docker info |\r\n| docker 版本 | docker version |\r\n| docker 版主 | docker 命令 --help |\r\n| 镜像列表 | docker images |\r\n| 镜像搜索 | docker search 镜像名 |\r\n| 正在运行 | docker ps |\r\n| 容器日志 | docker logs |\r\n\r\n\r\n## 常用位置\r\n【docker 配置文件】`/etc/docker/daemon.json`\r\n\r\n\r\n## 详情\r\n\r\n### docker images\r\n\r\n```shell\r\ndocker images -a  # 查看全部\r\ndocker images -q  # 查看id\r\ndocker images -aq # 查看全部id\r\n``` \r\n\r\n## docker ps\r\n```shell\r\ndocker ps [OPTIONS]\r\n# -a     查看全部现运行 +","commend":0,"watch":0,"evaluate":0,"date":"2022-04-11T02:24:39.049Z"},{"title":"镜像操作","img":"","href":"docker/docker-0/2","des":"# docker 镜像使用 \r\n\r\n## 运行镜像\r\ndocker run 指令\r\n1. DockerServer会一直在后台运行，等待着客户端的命令\r\n2. 通过守护进程对容器进行操作\r\n\r\n<pre><embed type=\"image/svg+xml\" src=\"../../../img/article/docker-architecture.svg\" /></pre>\r\n\r\n\r\n```shell\r\ndocker run [OPTIONS] imageName\r\n# -- name= \"Name\"  容器名字 比如tomcat0， tomcat1，用来区分容器\r\n# -d               后台使用\r\n# -it              使用交互的方式运行，启动并进入容器\r\n# -p               指定容器端口 -p 8080：8080\r\n#                      -p ip:主机端口:容器端口\r\n#                      -p 主机端口:容器端口\r\n#                      -p 容器端口\r\n","commend":0,"watch":0,"evaluate":0,"date":"2022-04-11T02:24:39.049Z"}]}