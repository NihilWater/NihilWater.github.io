{"articles":[{"title":"conda","img":"","href":"env/env-1/0","des":"# conda 安装虚拟环境\r\n\r\n## 介绍\r\nAnaconda提供了在一台机器上执行Python / R数据科学和机器学习的最简单方法。通过使用Anaconda，可以方便的进行python 环境的创建，多版本间python的切换，以及更加简单的pip包安装。\r\n\r\n【意义】多版本python控制让用户在一台电脑上运行多个python环境，防止出现pip包的版本冲突。例如在深度学习任务中，一个常用的pip包叫做`pytorch`, 用户如果想要研究前期使用低版本`pythorch`开发的网络时，而用户电脑上又存在新版本`pytorch`的项目，由于一个python环境只能存在一个`pythorch`包，所以一个解决办法就是安装连个python 环境，而Anaconda就为用户提供了这样的功能，并且可以通过简单的命令进行python 环境的切换。\r\n\r\n## 创建虚拟环境\r\n\r\n可以简单的使用如下的命令来创建一个虚拟环境。\r\n\r\n```shell\r\nconda create -n environment_name python=3.6\r\n```\r\n\r\n如果要将虚拟环境放置到指定位置需要","commend":0,"watch":0,"evaluate":0,"date":"2022-04-07T14:56:06.498Z"},{"title":"yum","img":"","href":"env/env-2/0","des":"# yum\r\n\r\n\r\n## 由于centos 停止更新，yum源出错\r\n【错位信息】\r\n```log\r\nErrors during downloading metadata for repository 'AppStream':\r\n  - Status code: 404 for https://repo.huaweicloud.com/centos/8/AppStream/x86_64/os/repodata/repomd.xml (IP: 61.172.237.164)\r\nError: Failed to download metadata for repo 'AppStream': Cannot download repomd.xml: Cannot download repodata/repomd.xml: All mirrors were tried\r\n\r\n```\r\n\r\n【解决方案】\r\n请参考：[https://blog.csdn.net/linzi19900517/article/details/122846919](https://blog.csdn.net/linzi1","commend":0,"watch":0,"evaluate":0,"date":"2022-04-07T14:56:06.498Z"},{"title":"SSL申请","img":"../../../img/article/2022-03-29-00-57-57.png","href":"env/env-2/1","des":"# 申请SSL免费证书\r\n\r\n## 什么是SSL？\r\n\r\n\r\n## 如何申请免费SSL证书\r\n\r\n> **1. 访问网站 https://freessl.cn/**\r\n> \r\n> ![](../../../img/article/2022-03-29-00-57-57.png)\r\n> 在横线上填写自己要声请的域名，点击确定\r\n\r\n\r\n> **2. 在域名提供商处填写以下字段**\r\n> \r\n> 如果以华为云为例，就是下面这样，像添加一个普通的域名解析一样，只不过要注意类型这里要换成CNAME。\r\n> \r\n> ![](../../../img/article/2022-03-28-23-59-40.png)\r\n> \r\n> 或者你的界面可能是下面这样，和上面类似\r\n> \r\n> ![](../../../img/article/2022-03-28-23-52-38.png)\r\n> \r\n> 填写完成之后，就可以点击验证，就可以看到证书密钥。如果第一次点击没有反应，可能是还没有解析成功，大概两分钟内就会解析成功。\r\n\r\n> **3. 配置SSL证书**\r\n> \r\n> 在华为云找到云证书管理服务，","commend":0,"watch":0,"evaluate":0,"date":"2022-04-07T14:56:06.498Z"},{"title":"状态查询","img":"","href":"docker/docker-0/1","des":"# 【docker】查询命令\r\n\r\n## 常用命令\r\n|命令功能|命令|\r\n| --- | --- |\r\n| docker 配置信息 | docker info |\r\n| docker 版本 | docker version |\r\n| docker 版主 | docker 命令 --help |\r\n| 镜像列表 | docker images |\r\n| 镜像搜索 | docker search 镜像名 |\r\n| 正在运行 | docker ps |\r\n| 容器日志 | docker logs |\r\n\r\n\r\n## 常用位置\r\n【docker 配置文件】`/etc/docker/daemon.json`\r\n\r\n\r\n## 详情\r\n\r\n### docker images\r\n\r\n```shell\r\ndocker images -a  # 查看全部\r\ndocker images -q  # 查看id\r\ndocker images -aq # 查看全部id\r\n``` \r\n\r\n## docker ps\r\n```shell\r\ndocker ps [OPTIONS]\r\n# -a     查看全部现运行 +","commend":0,"watch":0,"evaluate":0,"date":"2022-04-07T14:56:06.497Z"},{"title":"镜像操作","img":"","href":"docker/docker-0/2","des":"# docker 镜像使用 \r\n\r\n## 运行镜像\r\ndocker run 指令\r\n1. DockerServer会一直在后台运行，等待着客户端的命令\r\n2. 通过守护进程对容器进行操作\r\n\r\n<pre><embed type=\"image/svg+xml\" src=\"../../../img/article/docker-architecture.svg\" /></pre>\r\n\r\n\r\n```shell\r\ndocker run [OPTIONS] imageName\r\n# -- name= \"Name\"  容器名字 比如tomcat0， tomcat1，用来区分容器\r\n# -d               后台使用\r\n# -it              使用交互的方式运行，启动并进入容器\r\n# -p               指定容器端口 -p 8080：8080\r\n#                      -p ip:主机端口:容器端口\r\n#                      -p 主机端口:容器端口\r\n#                      -p 容器端口\r\n","commend":0,"watch":0,"evaluate":0,"date":"2022-04-07T14:56:06.497Z"},{"title":"容器操作","img":"","href":"docker/docker-0/3","des":"# 容器操作 \r\n什么是容器：容器不同于镜像，是镜像的一次运行。这里的镜像有点类似于java里的类，而容器则是类实例化的对象。\r\n\r\n## 创建容器\r\n```shell\r\ndocker run [OPTIONS] imageName\r\n# -- name= \"Name\"  容器名字 比如tomcat0， tomcat1，用来区分容器\r\n# -d               后台使用\r\n# -it              使用交互的方式运行，启动并进入容器\r\n# -p               指定容器端口 -p 8080：8080\r\n#                      -p ip:主机端口:容器端口\r\n#                      -p 主机端口:容器端口\r\n#                      -p 容器端口\r\n# -P               （P是大写）随机指定端口\r\n```\r\n【example】\r\n```shell\r\ndocker run -it centos /bin/bash  # 启动并进入centos 容器\r\n# 如果使用 do","commend":0,"watch":0,"evaluate":0,"date":"2022-04-07T14:56:06.497Z"},{"title":"introduction","img":"","href":"ai/ai-12/0","des":"# 图卷积神经网络\r\n## 意义\r\n使用神经网络来表达一张图上的信息。图相较于其他的数据结构，存在更加明显的结构特性。一张图的信息包含有4个方面，顶点的信息，边的信息，图整体的信息，图的连接信息。如今，大部分GNN在做的事情就是以一张图片的这些信息作为输入，得到一张输出图，输出图的结构信息与原图一样，但是顶点信息，边信息，整张图的信息表达会发生改变。\r\n\r\n## 信息的表达\r\n对于顶点信息，我们可以使用一个向量来进行表示。\r\n\r\n对于每一条边，我们同样可以使用一个向量来表示。\r\n对于全局信息，我们可以使用所有点的均值与所有边的均值进行表示，也可以使用一个和全部节点相连接的伪节点进行信息的表达。\r\n对于连接性，我们可以使用邻接表或者邻接矩阵来表示。\r\n\r\n## 案例说明\r\n【顶点分类问题】：已知一张图上有若干节点，需要对这些节点进行分类。\r\n① 最简单的方式，可能我们已经有了节点的向量表达，所以只需要对每个节点做一次全连接+softmax之类的分类网络就可以表示信息了。\r\n② 信息转化，假设顶点没有合理的向量表达，或者表达能力较弱，我们可以用边的","commend":0,"watch":0,"evaluate":0,"date":"2022-04-07T14:56:06.496Z"},{"title":"安装","img":"","href":"docker/docker-0/0","des":"# Docker安装\r\n\r\n## Docker的意义\r\n\r\n传统的虚拟机存在着一些弊病。\r\n\r\n1. 虚拟机主体庞大：有时甚至大于你要在虚拟机上运行的应用。\r\n2. 启动时间长：虚拟机启动需要走完整的linux启动流程。\r\n3. 结构冗余：如果需要使用多个虚拟机，则其中操作系统部分虽然是一样的，但是也要单独运行。\r\n   \r\ndocker 提出了一整套的解决方案来优化和解决了这些问题\r\n1. 虚拟机主体庞大：docker 可以直接使用宿主机的操作系统，每一个docker只提供运行的必要库和应用。\r\n2. 启动时间长：由于宿主机的操作系统已被加载，所以启动docker没有启动虚拟机时加载linux的流程。\r\n3. 结构冗余：docker 将每个运行时环境进行拆分，一个docker可以运行多个依赖，而依赖之间也可以共享，解决了结构冗余的问题。\r\n\r\n> 参考地址 [https://docs.docker.com/engine/install/centos/](https://docs.docker.com/engine/install/centos/)\r\n\r\n<br>\r\n\r\n## dock","commend":0,"watch":0,"evaluate":0,"date":"2022-04-07T14:56:06.496Z"},{"title":"CRF-RandWalk","img":"../../../img/article/2021-12-04-13-01-08.png","href":"ai/ai-10/2","des":"# CRF-RandWalk\r\n\r\n## 概率均匀化\r\n【本质】：设计一种概率转移方法，将图像中的密集概率向着整个物品进行扩散。也就是说通过计算两个特征像素之间的相似性，如果相似的话，就让当前像素上的概率和这个像素的概率进行均摊。\r\n\r\n## 条件随机场\r\n![](../../../img/article/2021-12-04-13-01-08.png)\r\n\r\n条件随机场通过“势函数”的引入，将初始的概率图进行转化。\r\n势函数包含了图片的像素色彩和位置信息\r\n\r\n## PCM\r\n![](../../../img/article/2021-12-04-13-18-36.png)\r\n\r\n图片来源于[https://arxiv.org/pdf/2004.04581v1](https://arxiv.org/pdf/2004.04581v1)\r\nPCM通过计算特征之间的相似程度，通过相似程度，进行概率转移。计算方式为余弦相似度。\r\n\r\n![](../../../img/article/2021-12-04-13-19-12.png)\r\n\r\n![](../../../img/article/20","commend":0,"watch":0,"evaluate":0,"date":"2022-04-07T14:56:06.495Z"},{"title":"BAP_NAL","img":"../../../img/article/2021-11-03-21-39-58.png","href":"ai/ai-10/4","des":"# BAP_NAL\r\n\r\n## 基础信息\r\n\r\n文章标题：Background-Aware Pooling and Noise-Aware Loss forWeakly-Supervised Semantic Segmentation\r\n\r\n文章链接：\r\n\r\n发表时间：\r\n\r\n\r\n## 背景\r\n\r\n\r\n## 创新点简介\r\n①提出了BAP（背景感知池）方法，能够在边界框内分辨出前景和背景，相比于GAP方法，不会只考虑到局部。\r\n②我们引入了一个噪音感知损失（NAL）来训练CNN的语义分割。\r\n\r\n**效果**：\r\n在PASCAL VOC 2012数据集上使用DeepLab-V1（VGG-16）与最先进的方法进行定量比较，以mIoU计。粗体数字表示最好的性能，下划线的数字是第二好的。\r\n`Image-level labels (10K) with Saliency (3K)`\r\n| 方法              | 价值 | 测试 |\r\n|------------------|------|------|\r\n| SeeNetNIPS’18    | 61.1 | 60.7 |\r\n| Fi","commend":0,"watch":0,"evaluate":0,"date":"2022-04-07T14:56:06.495Z"}]}