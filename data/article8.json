{"articles":[{"title":"FCOS","img":"","href":"ai/ai-3/1","des":"# FCOS\r\n\r\n## 基础信息\r\n\r\n文章标题：FCOS: Fully Convolutional One-Stage Object Detection \r\n\r\n文章链接：[https://arxiv.org/pdf/1904.01355.pdf](https://arxiv.org/pdf/1904.01355.pdf)\r\n\r\n发表时间：2019-04\r\n\r\n\r\n## 背景\r\n\r\n\r\n## 创新点简介\r\n\r\n\r\n## 问题\r\n存在的问题，使用每一个预测框里的像素进行分类和预测，会导致背景参与计算，这样的运算是没有意义的。甚至是无效的。\r\n问题疑点：考虑到感受野的问题，肯能边上的特征像素也能够完成对物品框边缘的预测，尤其是边缘像素更有可能包含了物体边缘的信息，要小心处理\r\n\r\n\r\n## 引用","commend":0,"watch":0,"evaluate":0,"date":"2022-04-18T17:08:05.543Z"},{"title":"sparse_RCNN","img":"../../../img/article/2022-03-15-15-25-43.png","href":"ai/ai-3/2","des":"# Sparse RCNN\r\n\r\n## 基础信息\r\n\r\n论文题目：Sparse R-CNN: End-to-End Object Detection with Learnable Proposals\r\n\r\n论文链接：[https://arxiv.org/abs/2011.12450](https://arxiv.org/abs/2011.12450)\r\n\r\n发表时间：2020-11\r\n\r\n## 创新\r\n\r\n使用可学习的100-300个边框来取代RPN（区域建议网络），实现了一个完全稀疏的端到端目标检测网络。\r\n\r\n\r\n## 详情\r\n\r\n### 稀疏和密集\r\n![](../../../img/article/2022-03-15-15-25-43.png)\r\n\r\n作者指出以前的目标检测都是每个特征像素做的，采用了“anchor boxes”机制，这会有十分密集的目标框（HWk个）产生，Faster RCNN 使用NMS筛选值的计算分类和边框回归的建议框，让一个密集的检测变得稀疏起来，但他仍然不能算是一个完全稀疏的目标检测方法（图b）。而本文作者所提出的Sparse RCNN则使用学习来的","commend":0,"watch":0,"evaluate":0,"date":"2022-04-18T17:08:05.543Z"},{"title":"GraphCut","img":"../../../img/article/2022-03-22-16-52-40.png","href":"ai/ai-4/0","des":"# GraphCut\r\n\r\n## 基础信息\r\n\r\n文章标题：Interactive Graph Cuts for Optimal Boundary & Region Segmentation of Objects in N-D Images\r\n\r\n文章链接：[https://www.csd.uwo.ca/~yboykov/Papers/iccv01.pdf](https://www.csd.uwo.ca/~yboykov/Papers/iccv01.pdf)\r\n\r\n发表时间：2001-07\r\n\r\n\r\n## 背景\r\n\r\n## 创新点简介\r\n用户标记部分像素作为“目标”或“背景”，为图像分割提供硬约束。此外，利用图像的边缘信息和区域信息作为软约束。图割方法是一种全局最优的N维图像分割方法。Graph cuts是一种能量优化算法，应用于前背景分割。它把图像分割问题当作图的最小割（min cut）问题。\r\n![](../../../img/article/2022-03-22-16-52-40.png)\r\n\r\n## 详细内容\r\n【具体步骤】\r\n- 首先，需要用户明确指出少量背景像素B和前景目标","commend":0,"watch":0,"evaluate":0,"date":"2022-04-18T17:08:05.543Z"},{"title":"DANet","img":"../../../img/article/2022-02-18-17-29-10.png","href":"ai/ai-4/2","des":"# DANet \r\n\r\n## 基础信息\r\n\r\n文章标题：Dual Attention Network for Scene Segmentation\r\n\r\n文章链接：[https://arxiv.org/abs/1809.02983](https://arxiv.org/abs/1809.02983)\r\n\r\n发表时间：2018-09\r\n\r\n\r\n## 创新点简介\r\n本文使用自注意力机制，在语义分割上加入了位置自注意力机制和通道自注意力机制，根据作者表述，位置自注意力机制将图片中相似的内容进行互相增强`【原文：any two positions with similar features can contribute mutual improvement regardless of their distance in spatial dimension】`，而通道自注意力机制则可以捕获任意通道之间的互相依赖关系。`【原文：we use the similar self-attention mechanism to capture the channel dependencies betwee","commend":0,"watch":0,"evaluate":0,"date":"2022-04-18T17:08:05.543Z"},{"title":"基础","img":"../../../img/article/2021-11-03-13-35-03.png","href":"ai/ai-5/0","des":"# 基础\r\n语义分割是对图像中的每个像素划分出对应的类别，实现像素级别的分类。实例分割是在语义分割的基础上，进一步分割已划分类别的具体对象，即分割出实例。\r\n\r\n![](../../../img/article/2021-11-03-13-35-03.png)\r\n\r\n## 实例分割算法存在的挑战\r\n引用2016年InstanceCut中的话，实例分割存在着4个问题：\r\n1. 像语义分割一样将每个实例作为一种分类是没有意义的，如“第五个汽车”类。\r\n2. 一张图像中的实例数目差别很大，以城市景观数据集为例，每张图片可能存在0-120个不等的目标实例。 \r\n3. 实例分割相比于目标检测，需要更多的数进行表达，而不是仅仅中心点和长宽，4个值。\r\n4. 实例分割相比语义分割，需要更加细致的标签。\r\n\r\n## 实例分割和语义分割\r\n1. 能否完全使用语义分割？\r\n\r\n   不行，由于目标数目不固定，不能让一个实例就是一个类别。一般思路是先进行目标检测，后对检测狂内的物体进行语义分割，判断检测框内语义分割结果与哪个实例掩膜最接近就认为是哪实例。\r\n\r\n2. 存在的问题：两个实例重叠\r\n   \r\n ","commend":0,"watch":0,"evaluate":0,"date":"2022-04-18T17:08:05.543Z"},{"title":"loss","img":"","href":"ai/ai-1/5","des":"# loss 函数\r\n\r\n| 函数名         | 接口                        | 使用说明 |\r\n| -------------- | -------------------------- | -------- |\r\n| 二分类交叉熵   | torch.nn.BCELoss            | --       |\r\n| 均方差函数    | torch.nn.MSELoss()          | --       |\r\n| 平均绝对值函数 | torch.nn.L1Loss()           | --       |\r\n| 交叉熵损失函数 | torch.nn.CrossEntropyLoss() | --       |\r\n\r\n\r\n\r\n\r\n## 二次损失函数\r\n\r\n## sigmoid_focal_loss_jit\r\n```python\r\nsigmoid_focal_loss_jit(\r\n            pred,\r\n            class_target,\r\n            alpha=,\r\n      ","commend":0,"watch":0,"evaluate":0,"date":"2022-04-18T17:08:05.542Z"},{"title":"visible","img":"","href":"ai/ai-1/6","des":"# pytorch 可视化\r\n\r\n## 图片可视化\r\n```python \r\nfrom matplotlib import pyplot as plt\r\nimage = $image.cpu().clone()  # detach().numpy() 这里的 $image 要换成自己的变量名\r\n# image = image.permute(1,2,0)    # 这个是可选的，主要是要将图片的维度调正为(w, h, c)的形式\r\nplt.imshow(image)  # 准备图片\r\nplt.show()  # 展示图片\r\n```\r\n","commend":0,"watch":0,"evaluate":0,"date":"2022-04-18T17:08:05.542Z"},{"title":"resize","img":"../../../img/article/2022-04-18-21-34-43.png","href":"ai/ai-1/7","des":"\r\n\r\n![](../../../img/article/2022-04-18-21-34-43.png)\r\n","commend":0,"watch":0,"evaluate":0,"date":"2022-04-18T17:08:05.542Z"},{"title":"安装","img":"","href":"ai/ai-1/0","des":"# 安装\r\n\r\n## 版本匹配列表\r\n\r\n版本对照表：[https://pytorch.org/get-started/previous-versions/](https://pytorch.org/get-started/previous-versions/)\r\n\r\n\r\n下载链接：[https://download.pytorch.org/whl/torch_stable.html](https://download.pytorch.org/whl/torch_stable.html)\r\n\r\n\r\n| pytorch | torchvision | torchaudio |\r\n| ------- | ----------- | ---------- |\r\n| 1.10.1  | 0.11.2      | 1.10.1     |\r\n| 1.9.0   | 0.10.0      | 0.9.0      |\r\n| 1.8.1   | 0.9.1       | 0.8.1      |\r\n| 1.8.0   | 0.9.0       | 0.8.0      |\r\n| 1.7.1 ","commend":0,"watch":0,"evaluate":0,"date":"2022-04-18T17:08:05.541Z"},{"title":"nn","img":"","href":"ai/ai-1/1","des":"# Pytouch.nn 相关函数对照\r\n\r\n## nn.Embedding\r\n【功能】<br/>\r\n产生一组存储固定大小的词典的嵌入向量的查找表。\r\n【初始化】\r\n```py\r\nembed = torch.nn.Embedding(num_embeddings,embedding_dim)\r\n```\r\n> num_embeddings (python:int) – 词典的大小尺寸\r\n> embedding_dim (python:int) – 嵌入向量的维度，即用多少维来表示一个符号。\r\n\r\n有时在初始化时会被赋值会伴随着初始化过程。\r\n```py\r\nself.init_proposal_boxes = nn.Embedding(300, 4)\r\nnn.init.constant_(self.init_proposal_boxes.weight[:, :2], 0.5)\r\nnn.init.constant_(self.init_proposal_boxes.weight[:, 2:], 1.0)\r\n```\r\n\r\n【使用】<br />\r\n使用过程中，将`embed`直接当作向量来是使用","commend":0,"watch":0,"evaluate":0,"date":"2022-04-18T17:08:05.541Z"}]}