{"articles":[{"title":"【论文整理 弱监督语义分割】Simple Does It（SDI）","img":"https://img-blog.csdnimg.cn/9b8f35dc91e342f58c4653da336c6c9e.png","href":"nisown/nisown-0/2","des":"# 【论文整理 弱监督语义分割】Simple Does It（SDI）\r\n## 创新点总结\r\nSimple Does It 使用了Bounding Box 作为弱监督分割的标签，论文认为Bounding Box 是一种带有噪声的分割标签，使用递归训练`( recursive training )`的方式对模型进行优化。论文中使用的 先验分割是基于`GrabCut `的。\r\n\r\n<font color=#aaa >We view the problem of weak supervision as an issue of input label noise.</font>\r\n\r\n<hr style=\" border:solid; width:100px; height:1px;\" color=#eee size=1\">\r\n\r\n## 信息\r\n论文题目：Simple Does It: Weakly Supervised Instance and Semantic Segmentation\r\n论文链接： [https://openaccess.thecvf.com/content_cvpr_2","commend":0,"watch":0,"evaluate":0,"date":"2022-03-26T11:42:28.524Z"},{"title":"符号","img":"","href":"markdown/markdown-0/0","des":"# markdown 特殊字符汇总\r\n\r\n## 希腊字符\r\n\r\n$\\alpha$  : \\alpha\r\n\r\n$\\beta$   : \\beta\r\n\r\n$\\gamma$   : \\gamma\r\n\r\n$\\Gamma$   : \\Gamma\r\n\r\n$\\delta$   : \\delta\r\n\r\n$\\Delta$   : \\Delta\r\n\r\n$\\epsilon$   : \\epsilon\r\n\r\n$\\varepsilon$   : \\varepsilon\r\n\r\n$\\zeta$   : \\zeta\r\n\r\n$\\eta$   : \\eta\r\n\r\n$\\theta$   : \\theta\r\n\r\n$\\Theta$   : \\Theta\r\n\r\n$\\vartheta$   : \\vartheta \r\n\r\n$\\iota$   : \\iota\r\n\r\n$\\kappa$   : \\kappa\r\n\r\n$\\lambda$   : \\lambda\r\n\r\n$\\Lambda$   : \\Lambda\r\n\r\n$\\mu$   : \\mu\r\n\r\n$\\nu$   : \\nu\r\n\r\n$\\xi$   : \\xi\r\n\r\n$\\Xi$   : \\X","commend":0,"watch":0,"evaluate":0,"date":"2022-03-26T11:42:28.523Z"},{"title":"字母样式","img":"","href":"markdown/markdown-0/1","des":"# markdown 字母样式","commend":0,"watch":0,"evaluate":0,"date":"2022-03-26T11:42:28.523Z"},{"title":"镜像操作","img":"","href":"docker/docker-0/2","des":"# docker 镜像使用 \r\n\r\n## 运行镜像\r\ndocker run 指令\r\n1. DockerServer会一直在后台运行，等待着客户端的命令\r\n2. 通过守护进程对容器进行操作\r\n\r\n<pre><embed type=\"image/svg+xml\" src=\"../../../img/article/docker-architecture.svg\" /></pre>\r\n\r\n\r\n```shell\r\ndocker run [OPTIONS] imageName\r\n# -- name= \"Name\"  容器名字 比如tomcat0， tomcat1，用来区分容器\r\n# -d               后台使用\r\n# -it              使用交互的方式运行，启动并进入容器\r\n# -p               指定容器端口 -p 8080：8080\r\n#                      -p ip:主机端口:容器端口\r\n#                      -p 主机端口:容器端口\r\n#                      -p 容器端口\r\n","commend":0,"watch":0,"evaluate":0,"date":"2022-03-26T11:42:28.522Z"},{"title":"容器操作","img":"","href":"docker/docker-0/3","des":"# 容器操作 \r\n什么是容器：容器不同于镜像，是镜像的一次运行。这里的镜像有点类似于java里的类，而容器则是类实例化的对象。\r\n\r\n## 创建容器\r\n```shell\r\ndocker run [OPTIONS] imageName\r\n# -- name= \"Name\"  容器名字 比如tomcat0， tomcat1，用来区分容器\r\n# -d               后台使用\r\n# -it              使用交互的方式运行，启动并进入容器\r\n# -p               指定容器端口 -p 8080：8080\r\n#                      -p ip:主机端口:容器端口\r\n#                      -p 主机端口:容器端口\r\n#                      -p 容器端口\r\n# -P               （P是大写）随机指定端口\r\n```\r\n【example】\r\n```shell\r\ndocker run -it centos /bin/bash  # 启动并进入centos 容器\r\n# 如果使用 do","commend":0,"watch":0,"evaluate":0,"date":"2022-03-26T11:42:28.522Z"},{"title":"面试","img":"../../../img/article/container_vs_vm.png","href":"docker/docker-0/4","des":"# 面试知识点\r\n\r\n## 为什么docker 运行的速度会快\r\n![](../../../img/article/container_vs_vm.png)\r\n1. docker是os的虚拟化，而VM是硬件层的虚拟化，docker 没有了Hpyevisor（一种运行在基础物理服务器和操作系统之间的中间软件层，可允许多个操作系统和应用共享硬件）\r\n2. docker 与虚拟机相比有更少的抽象层。\r\n3. 虚拟机启动需要重新加载操作系统，而docker可以直接使用宿主机的操作系统。","commend":0,"watch":0,"evaluate":0,"date":"2022-03-26T11:42:28.522Z"},{"title":"nvm","img":"","href":"env/env-0/0","des":"\r\n\r\n## NVM 常见命令\r\n```shell\r\nnvm install stable ## 安装最新稳定版 node\r\nnvm install <version> ## 安装指定版本\r\nnvm uninstall <version> ## 删除已安装的指定版本\r\nnvm use <version> ## 切换使用指定的版本node\r\nnvm ls ## 列出所有安装的版本\r\nnvm ls-remote ## 列出所有远程服务器的版本\r\nnvm current ## 显示当前的版本\r\nnvm alias <name> <version> ## 给不同的版本号添加别名\r\nnvm unalias <name> ## 删除已定义的别名\r\nnvm reinstall-packages <version> ## 在当前版本 node 环境下，重新全局安装指定版本号的 npm 包\r\nnvm alias default [node版本号] ##设置默认版本\r\n```\r\n\r\n\r\n## npm 查看所有全局\r\n```shell\r\ncnpm list -g --depth 0\r\n```","commend":0,"watch":0,"evaluate":0,"date":"2022-03-26T11:42:28.522Z"},{"title":"PrototypicalNet","img":"","href":"ai/ai-11/0","des":"# PrototypicalNet\r\n\r\n## 信息\r\n\r\n文章标题：Prototypical Networks for Few-shot Learning\r\n\r\n文章链接：[https://arxiv.org/abs/1703.05175](https://arxiv.org/abs/1703.05175)\r\n\r\n发表时间：2017-03\r\n\r\n\r\n## 背景\r\n【度量学习】\r\n\r\n是一种学习两个样本（特征）之间相似性的学习方法。常见的度量有欧式距离、等。以上所提到的度量方法都是不可学习的，度量学习则使用神经网络来训练一个度量函数，这样做可以**对长度不同的片段进行比较**，也可以通过维度扩展的方式，来**寻找更深层次的相似性关系**。\r\n\r\n【度量空间】\r\n\r\n是指度量函数的集合\r\n\r\n【小样本学习】\r\n\r\n通过已经训练好的模型，在其基础之上加入新的分类，并且只有少量样本。在次基础上进行训练，使网络可以泛化到这些样本上。由于样本量很少，在新的类上很容易出先<font color=\"red\">过拟合的现象。</font>\r\n\r\n## 创新点简介\r\n本文使用原型网络`Prototypi","commend":0,"watch":0,"evaluate":0,"date":"2022-03-26T11:42:28.521Z"},{"title":"安装","img":"","href":"docker/docker-0/0","des":"# Docker安装\r\n\r\n## Docker的意义\r\n\r\n传统的虚拟机存在着一些弊病。\r\n\r\n1. 虚拟机主体庞大：有时甚至大于你要在虚拟机上运行的应用。\r\n2. 启动时间长：虚拟机启动需要走完整的linux启动流程。\r\n3. 结构冗余：如果需要使用多个虚拟机，则其中操作系统部分虽然是一样的，但是也要单独运行。\r\n   \r\ndocker 提出了一整套的解决方案来优化和解决了这些问题\r\n1. 虚拟机主体庞大：docker 可以直接使用宿主机的操作系统，每一个docker只提供运行的必要库和应用。\r\n2. 启动时间长：由于宿主机的操作系统已被加载，所以启动docker没有启动虚拟机时加载linux的流程。\r\n3. 结构冗余：docker 将每个运行时环境进行拆分，一个docker可以运行多个依赖，而依赖之间也可以共享，解决了结构冗余的问题。\r\n\r\n> 参考地址 [https://docs.docker.com/engine/install/centos/](https://docs.docker.com/engine/install/centos/)\r\n\r\n<br>\r\n\r\n## dock","commend":0,"watch":0,"evaluate":0,"date":"2022-03-26T11:42:28.521Z"},{"title":"状态查询","img":"","href":"docker/docker-0/1","des":"# 【docker】查询命令\r\n\r\n## 常用命令\r\n|命令功能|命令|\r\n| --- | --- |\r\n| docker 配置信息 | docker info |\r\n| docker 版本 | docker version |\r\n| docker 版主 | docker 命令 --help |\r\n| 镜像列表 | docker images |\r\n| 镜像搜索 | docker search 镜像名 |\r\n| 正在运行 | docker ps |\r\n| 容器日志 | docker logs |\r\n\r\n\r\n## 常用位置\r\n【docker 配置文件】`/etc/docker/daemon.json`\r\n\r\n\r\n## 详情\r\n\r\n### docker images\r\n\r\n```shell\r\ndocker images -a  # 查看全部\r\ndocker images -q  # 查看id\r\ndocker images -aq # 查看全部id\r\n``` \r\n\r\n## docker ps\r\n```shell\r\ndocker ps [OPTIONS]\r\n# -a     查看全部现运行 +","commend":0,"watch":0,"evaluate":0,"date":"2022-03-26T11:42:28.521Z"}]}