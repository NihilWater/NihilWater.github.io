{"articles":[{"title":"Vue安装","img":"","href":"vue/vue-0/0","des":"# Vue 环境配置 \r\n\r\n\r\n## 使用 nvm 创建合适的npm\r\n```shell\r\nnvm install <version>\r\n```\r\n\r\n## 安装cnpm\r\n```shell\r\nnpm install cnpm -g\r\n```\r\n\r\n## 安装vue相关内容 \r\n```shell\r\ncnpm install -g @vue/cli\r\n```\r\n\r\n## 使用vue客户端创建vue应用 \r\n```shell\r\nvue create hello-world\r\n```\r\n或者 使用cli-init 创建，两者创建的启动器是不一样的\r\n\r\n```shell\r\nnpm install -g @vue/cli-init\r\n# `vue init` 的运行效果将会跟 `vue-cli@2.x` 相同\r\nvue init webpack my-project\r\n```","commend":0,"watch":0,"evaluate":0,"date":"2022-04-02T15:04:51.282Z"},{"title":"单组件开发","img":"","href":"vue/vue-0/1","des":"# 使用Vue 进行单组件开发 \r\n\r\n## 1. 安装vue-cli-service-global\r\n```shell \r\ncnpm install @vue/cli-service-global -g\r\ncnpm install vue-template-compiler -g\r\n```\r\n\r\n\r\n## 使用vue-cli-service 进行\r\n```shell \r\nvue-cli-service serve App.vue\r\n```\r\n\r\n\r\n## 参考资料\r\nhttps://www.cnblogs.com/Grani/p/14188144.html \r\n","commend":0,"watch":0,"evaluate":0,"date":"2022-04-02T15:04:51.282Z"},{"title":"输入输出","img":"","href":"unity/unity-0/0","des":"# 输入输出\r\n\r\n本文将简单描述鼠标、键盘的输入方法，以及输出文本的方法。\r\n\r\n## 前后输入\r\n\r\n```c\r\nfloat h = Input.GetAxis(\"Horizontal\");\r\nfloat v = Input.GetAxis(\"Vertical\");\r\n```\r\n\r\n## 鼠标输入\r\n\r\n```c\r\n\r\n```\r\n\r\n## 输出\r\n","commend":0,"watch":0,"evaluate":0,"date":"2022-04-02T15:04:51.281Z"},{"title":"生成","img":"","href":"unity/unity-0/1","des":"# Unity 生成\r\n\r\n## 案例：生成10 个 unity 对象，使用协程\r\n\r\n```c\r\n    void Start()\r\n    {\r\n        StartCoroutine(SpawneEnemy());\r\n    }\r\n\r\n    IEnumerator SpawneEnemy() {\r\n        foreach (Wave wave in waves) {\r\n            for (int i = 0; i < wave.count; i++) {\r\n                // GameObject.Instantiate 接收三个参数， 1. 游戏对象  2. 生成的位置  3. 生成的角度\r\n                GameObject.Instantiate(wave.enemyPrefab, START.position, Quaternion.identity);\r\n                yield return new WaitForSeconds(wave.rate);  // 生产的间隔\r\n     ","commend":0,"watch":0,"evaluate":0,"date":"2022-04-02T15:04:51.281Z"},{"title":"添加点击事件","img":"../../../img/article/2022-02-12-23-08-18.png","href":"unity/unity-0/2","des":"# unity 点击事件\r\n\r\n对于 3d 场景下物品的点击，需要使用到射线方法。\r\n\r\n## 多个重复对象的点击方法\r\n\r\n【1. 添加Layer】<br />\r\n给这些重复的物品添加相同的Layer, 这步最好在物品复制之前完成。\r\n![添加layer](../../../img/article/2022-02-12-23-08-18.png)\r\n\r\n```c\r\nprivate void Update()\r\n{\r\n    if (Input.GetMouseButtonDown(0)) {\r\n        if (EventSystem.current.IsPointerOverGameObject() == false) {\r\n            Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);\r\n            RaycastHit hit;\r\n            bool isCollider = Physics.Raycast(ray,out hit,  1000, LayerMask","commend":0,"watch":0,"evaluate":0,"date":"2022-04-02T15:04:51.281Z"},{"title":"【论文整理 弱监督语义分割】Simple Does It（SDI）","img":"https://img-blog.csdnimg.cn/9b8f35dc91e342f58c4653da336c6c9e.png","href":"nisown/nisown-0/2","des":"# 【论文整理 弱监督语义分割】Simple Does It（SDI）\r\n## 创新点总结\r\nSimple Does It 使用了Bounding Box 作为弱监督分割的标签，论文认为Bounding Box 是一种带有噪声的分割标签，使用递归训练`( recursive training )`的方式对模型进行优化。论文中使用的 先验分割是基于`GrabCut `的。\r\n\r\n<font color=#aaa >We view the problem of weak supervision as an issue of input label noise.</font>\r\n\r\n<hr style=\" border:solid; width:100px; height:1px;\" color=#eee size=1\">\r\n\r\n## 基础信息\r\n论文题目：Simple Does It: Weakly Supervised Instance and Semantic Segmentation\r\n论文链接： [https://openaccess.thecvf.com/content_cvpr","commend":0,"watch":0,"evaluate":0,"date":"2022-04-02T15:04:51.280Z"},{"title":"项目结构","img":"","href":"nisown/nisown-0/3","des":"# 项目结构\r\n","commend":0,"watch":0,"evaluate":0,"date":"2022-04-02T15:04:51.280Z"},{"title":"文章管理","img":"","href":"nisown/nisown-1/0","des":"","commend":0,"watch":0,"evaluate":0,"date":"2022-04-02T15:04:51.280Z"},{"title":"导出专栏","img":"","href":"nisown/nisown-1/1","des":"# 导出专栏\r\n\r\n## 功能介绍\r\n本功能让用户将专栏（public/markdown/下的一个文件夹）发布为word。\r\n\r\n## 使用流程\r\n\r\n### 请首先安装 pandoc\r\n下载链接：[https://www.pandoc.org/installing.html](https://www.pandoc.org/installing.html)\r\n下载完成后需要将pandoc 配置到环境变量中\r\n\r\n### 命令\r\n```shell\r\nnode run toword [:name] [:type]\r\n# [:name] 代表是哪个专栏\r\n# [:type] 代表是哪个类型，比如a和p\r\n   -- a all 表示打包所有的文章\r\n   -- p public 表示打包所有公开的文章\r\n# 例如 node run toword niswon a\r\n```","commend":0,"watch":0,"evaluate":0,"date":"2022-04-02T15:04:51.280Z"},{"title":"html各种空格","img":"","href":"markdown/markdown-0/3","des":"# html各种空格\r\n\r\n众所周知，html是不解析空格的，markdown也一样，如果你要开头空两个要么可以调整css, 给元素一个p{text-indent:2em;}属性，要么就用空格。\r\n\r\n| 代码 | 解释 |\r\n| :---- | :---- |\r\n|& nbsp;| 它叫不换行空格，全称No-Break Space，它是最常见和我们使用最多的空格，大多数的人可能只接触&nbsp;，它是按下space键产生的空格。在HTML中，如果你用空格键产生此空格，空格是不会累加的(只算1个)。要使用html实体表示才可累加，该空格占据宽度受字体影响明显而强烈。|\r\n|& ensp;| 它叫“半角空格”，全称是En Space,en是字体排印学的计量单位，为em宽度的一半。根据定义，它等同于字体度的一半(如16px字体中就是8px)。名义上是小写字母n的宽度。此空格传承空格家族一贯的特性:透明的，此空格有个相当稳健的特性，就是其占据的宽度正好是1/2个中文宽度，而且基本上不受字体影响。|\r\n|& emsp;| 它叫“全角空格”，全称是Em Space,em是字体排印学的计量单位，相","commend":0,"watch":0,"evaluate":0,"date":"2022-04-02T15:04:51.279Z"}]}