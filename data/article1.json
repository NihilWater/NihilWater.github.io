{"articles":[{"title":"Vue安装","img":"","href":"vue/vue-0/0","des":"# Vue 环境配置 \r\n\r\n\r\n## 使用 nvm 创建合适的node\r\n```shell\r\nnvm install <version>\r\n```\r\n\r\n<font color='red'>出现没有npm的情况可以去下面的链接中下载</font>\r\n> https://github.com/npm/cli/archive\r\n\r\n## 安装cnpm\r\n```shell\r\nnpm install cnpm -g\r\n```\r\n\r\n## 安装vue相关内容 \r\n```shell\r\ncnpm install -g @vue/cli\r\n```\r\n\r\n## 使用vue客户端创建vue应用 \r\n```shell\r\nvue create hello-world\r\n```\r\n或者 使用cli-init 创建，两者创建的启动器是不一样的\r\n\r\n```shell\r\nnpm install -g @vue/cli-init\r\n# `vue init` 的运行效果将会跟 `vue-cli@2.x` 相同\r\nvue init webpack my-project\r\n```","commend":0,"watch":0,"evaluate":0,"date":"2022-04-13T14:27:04.447Z"},{"title":"单组件开发","img":"","href":"vue/vue-0/1","des":"# 使用Vue 进行单组件开发 \r\n\r\n## 1. 安装vue-cli-service-global\r\n```shell \r\ncnpm install @vue/cli-service-global -g\r\ncnpm install vue-template-compiler -g\r\n```\r\n\r\n\r\n## 使用vue-cli-service 进行\r\n```shell \r\nvue-cli-service serve App.vue\r\n```\r\n\r\n\r\n## 参考资料\r\nhttps://www.cnblogs.com/Grani/p/14188144.html \r\n","commend":0,"watch":0,"evaluate":0,"date":"2022-04-13T14:27:04.447Z"},{"title":"添加点击事件","img":"../../../img/article/2022-02-12-23-08-18.png","href":"unity/unity-0/2","des":"# unity 点击事件\r\n\r\n对于 3d 场景下物品的点击，需要使用到射线方法。\r\n\r\n## 多个重复对象的点击方法\r\n\r\n【1. 添加Layer】<br />\r\n给这些重复的物品添加相同的Layer, 这步最好在物品复制之前完成。\r\n![添加layer](../../../img/article/2022-02-12-23-08-18.png)\r\n\r\n```c\r\nprivate void Update()\r\n{\r\n    if (Input.GetMouseButtonDown(0)) {\r\n        if (EventSystem.current.IsPointerOverGameObject() == false) {\r\n            Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);\r\n            RaycastHit hit;\r\n            bool isCollider = Physics.Raycast(ray,out hit,  1000, LayerMask","commend":0,"watch":0,"evaluate":0,"date":"2022-04-13T14:27:04.446Z"},{"title":"有图片","img":"","href":"other/other-0/0","des":"# python 爬取一个网页下所有图片\r\n\r\n```python\r\nimport requests\r\nimport re\r\nimport time\r\n\r\nfrom urllib.parse import urlparse, parse_qs, parse_qsl\r\n\r\n\r\ndef get_html(url):\r\n    '''\r\n    两个参数\r\n    :param url:统一资源定位符,请求网址\r\n    :param headers:请求头\r\n    :return:html\r\n    '''\r\n\r\n    response = requests.get(url)\r\n    # 获取网页信息文本\r\n    html = response.text\r\n    # ***************** End ******************** #\r\n    return html\r\n\r\n\r\ndef findImageUrl(html):\r\n    '''\r\n    通过正则表达式匹配html 文本里的所有图片\r\n    :param html:\r\n    :return:","commend":0,"watch":0,"evaluate":0,"date":"2022-04-13T14:27:04.445Z"},{"title":"输入输出","img":"","href":"unity/unity-0/0","des":"# 输入输出\r\n\r\n本文将简单描述鼠标、键盘的输入方法，以及输出文本的方法。\r\n\r\n## 前后输入\r\n\r\n```c\r\nfloat h = Input.GetAxis(\"Horizontal\");\r\nfloat v = Input.GetAxis(\"Vertical\");\r\n```\r\n\r\n## 鼠标输入\r\n\r\n```c\r\n\r\n```\r\n\r\n## 输出\r\n","commend":0,"watch":0,"evaluate":0,"date":"2022-04-13T14:27:04.445Z"},{"title":"生成","img":"","href":"unity/unity-0/1","des":"# Unity 生成\r\n\r\n## 案例：生成10 个 unity 对象，使用协程\r\n\r\n```c\r\n    void Start()\r\n    {\r\n        StartCoroutine(SpawneEnemy());\r\n    }\r\n\r\n    IEnumerator SpawneEnemy() {\r\n        foreach (Wave wave in waves) {\r\n            for (int i = 0; i < wave.count; i++) {\r\n                // GameObject.Instantiate 接收三个参数， 1. 游戏对象  2. 生成的位置  3. 生成的角度\r\n                GameObject.Instantiate(wave.enemyPrefab, START.position, Quaternion.identity);\r\n                yield return new WaitForSeconds(wave.rate);  // 生产的间隔\r\n     ","commend":0,"watch":0,"evaluate":0,"date":"2022-04-13T14:27:04.445Z"},{"title":"案例","img":"https://octodex.github.com/images/minion.png","href":"nisown/nisown-0/1","des":"---\r\n__Advertisement :)__\r\n\r\n- __[pica](https://nodeca.github.io/pica/demo/)__ - high quality and fast image\r\n  resize in browser.\r\n- __[babelfish](https://github.com/nodeca/babelfish/)__ - developer friendly\r\n  i18n with plurals support and easy syntax.\r\n\r\nYou will like those projects!\r\n\r\n---\r\n\r\n# h1 Heading 8-)\r\n## h2 Heading\r\n### h3 Heading\r\n#### h4 Heading\r\n##### h5 Heading\r\n###### h6 Heading\r\n\r\n\r\n## Horizontal Rules\r\n\r\n___\r\n\r\n---\r\n\r\n***\r\n\r\n\r\n## Typographic replacements\r\n\r\nEnable typographer","commend":0,"watch":0,"evaluate":0,"date":"2022-04-13T14:27:04.444Z"},{"title":"项目结构","img":"","href":"nisown/nisown-0/2","des":"# 项目结构\r\n","commend":0,"watch":0,"evaluate":0,"date":"2022-04-13T14:27:04.444Z"},{"title":"文章管理","img":"","href":"nisown/nisown-1/0","des":"","commend":0,"watch":0,"evaluate":0,"date":"2022-04-13T14:27:04.444Z"},{"title":"导出专栏","img":"","href":"nisown/nisown-1/1","des":"# 导出专栏\r\n\r\n## 功能介绍\r\n本功能让用户将专栏（public/markdown/下的一个文件夹）发布为word。\r\n\r\n## 使用流程\r\n\r\n### 请首先安装 pandoc\r\n下载链接：[https://www.pandoc.org/installing.html](https://www.pandoc.org/installing.html)\r\n下载完成后需要将pandoc 配置到环境变量中\r\n\r\n### 命令\r\n```shell\r\nnode run toword [:name] [:type]\r\n# [:name] 代表是哪个专栏\r\n# [:type] 代表是哪个类型，比如a和p\r\n   -- a all 表示打包所有的文章\r\n   -- p public 表示打包所有公开的文章\r\n# 例如 node run toword niswon a\r\n```","commend":0,"watch":0,"evaluate":0,"date":"2022-04-13T14:27:04.444Z"}]}