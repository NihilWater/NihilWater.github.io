{"articles":[{"title":"登录流程","img":"../../../img/article/2022-04-17-12-55-20.png","href":"wechat/wechat-1/1","des":"# 微信小程序用户登录一般流程\r\n\r\n## 流程图\r\n\r\n![](../../../img/article/2022-04-17-12-55-20.png)\r\n\r\n## 获取用户OpenId\r\n上文中说过OpenId是微信用户在小程序里的唯一识别码，获取了它，就等于有了用户Id，以方便之后用户敏感的所有操作。那么如何去获取它呢？\r\n\r\n微信提供`wx.login`方法来获取一个叫做`code`的东西，通过`code` + `微信小程序密钥`，来对`https://api.weixin.qq.com/sns/jscode2session` 发起请求，就可以获取用户的`openId`了。\r\n\r\n```js\r\n// 调用 wx.login 获取用户 code\r\nwx.login({\r\n  success: function (res) {\r\n     console.log(res.code)\r\n  }\r\n})\r\n```\r\n\r\n通过以上代码可以放到app的onload方法中，打开小程序就取得用户的code，下一步就需要将code发送给后端服务程序。获取用户的OpenId了。\r\n【前端代码】\r","commend":0,"watch":0,"evaluate":0,"date":"2022-04-18T17:08:05.565Z"},{"title":"登录代码","img":"","href":"wechat/wechat-1/2","des":"# 微信小程序用户登录具体代码\r\n\r\n上文简单描述了微信小程序的登录大体流程，以及获取OpenId的具体方法，本文将将更加具体的对业务流程进行实现。使用到的主要技术有。\r\n\r\n【本文目标】：在用户进入微信小程序时，获取用户的基本信息，如果用户未注册，就以“游客” 展示小程序。\r\n\r\n\r\n- JWT: 用于记录用户OpenId 和 权限\r\n- HttpClient：用于后台和微信服务器通信","commend":0,"watch":0,"evaluate":0,"date":"2022-04-18T17:08:05.565Z"},{"title":"Vue安装","img":"","href":"vue/vue-0/0","des":"# Vue 环境配置 \r\n\r\n\r\n## 使用 nvm 创建合适的node\r\n```shell\r\nnvm install <version>\r\n```\r\n\r\n<font color='red'>出现没有npm的情况可以去下面的链接中下载</font>\r\n> https://github.com/npm/cli/archive\r\n\r\n## 安装cnpm\r\n```shell\r\nnpm install cnpm -g\r\n```\r\n\r\n## 安装vue相关内容 \r\n```shell\r\ncnpm install -g @vue/cli\r\n```\r\n\r\n## 使用vue客户端创建vue应用 \r\n```shell\r\nvue create hello-world\r\n```\r\n或者 使用cli-init 创建，两者创建的启动器是不一样的\r\n\r\n```shell\r\nnpm install -g @vue/cli-init\r\n# `vue init` 的运行效果将会跟 `vue-cli@2.x` 相同\r\nvue init webpack my-project\r\n```","commend":0,"watch":0,"evaluate":0,"date":"2022-04-18T17:08:05.564Z"},{"title":"单组件开发","img":"","href":"vue/vue-0/1","des":"# 使用Vue 进行单组件开发 \r\n\r\n## 1. 安装vue-cli-service-global\r\n```shell \r\ncnpm install @vue/cli-service-global -g\r\ncnpm install vue-template-compiler -g\r\n```\r\n\r\n\r\n## 使用vue-cli-service 进行\r\n```shell \r\nvue-cli-service serve App.vue\r\n```\r\n\r\n\r\n## 参考资料\r\nhttps://www.cnblogs.com/Grani/p/14188144.html \r\n","commend":0,"watch":0,"evaluate":0,"date":"2022-04-18T17:08:05.564Z"},{"title":"基础","img":"","href":"web/web-0/0","des":"# 静态Blog\r\n\r\n## 简介\r\n静态页面是指只使用js, css, html等前端资源所搭建的网站；而所谓静态博客，即通过生成工具（eg：Hexo；Hugo等），直接将作者所书写的博文编译成静态界面。作者/博主，只需将生成的文件部署在静态 server上面即可被在互联网中访问。 用户通过浏览器访问服务器，直接就回获得已编译的静态资源。\r\n\r\n## 优点\r\n- 【低成本】：使用github，gitee 等代码仓库，即可部署查阅，相比于前后端方式的网站形式，不需要搭建后台服务器。\r\n- 【易部署】：相比于前后端方式的网站形式，静态页面可以满足免于后端开发。\r\n- 【速度快】：没有后端返回数据的步骤，无需查询数据库，纯静态页面返回很快。\r\n\r\n## 缺点\r\n- 【无权限】：静态页面没有权限管理，不支持原生的登录，评论等。\r\n- 【不灵活】：没有后端，如果需要修改文章，需要再次部署。\r\n","commend":0,"watch":0,"evaluate":0,"date":"2022-04-18T17:08:05.564Z"},{"title":"云开发","img":"","href":"wechat/wechat-0/0","des":"# 云开发\r\n\r\n## 介绍\r\n\r\n微信云开发是微信团队联合腾讯云推出的专业的小程序开发服务。开发者无需搭建服务器，可免鉴权直接使用平台提供的 API 进行业务开发。\r\n\r\n<br />\r\n\r\n## 优点\r\n\r\n使用云开发可以快速开发小程序、小游戏、公众号网页等，并且原生打通微信开放能力。\r\n\r\n- 无需搭建服务器快速构建小程序、公众号\r\n- 免登录、免鉴权调用微信开放服务\r\n- 按量计费，成本更低，后端资源根据业务流量自动扩容，先使用后付费，无需支付闲置成本。\r\n\r\n<br />\r\n\r\n## 费用\r\n\r\n云资源可以免费使用，但是有限额，具体的访问次数和资源分配有着一套规则，详情可以参考[https://developers.weixin.qq.com/miniprogram/dev/wxcloud/billing/quota.html](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/billing/quota.html)。\r\n","commend":0,"watch":0,"evaluate":0,"date":"2022-04-18T17:08:05.564Z"},{"title":"OpenId 的获取和使用","img":"","href":"wechat/wechat-1/0","des":"# 微信小程序OpenId 的获取和使用\r\n\r\n\r\n## 介绍 \r\n\r\nopenId是用户在当前公众号（小程序）下的唯一标识（‘身份证’），就是说通过这个openId，就能区分在这个公众号下具体是哪个用户。\r\n\r\n","commend":0,"watch":0,"evaluate":0,"date":"2022-04-18T17:08:05.564Z"},{"title":"输入输出","img":"","href":"unity/unity-0/0","des":"# 输入输出\r\n\r\n本文将简单描述鼠标、键盘的输入方法，以及输出文本的方法。\r\n\r\n## 前后输入\r\n\r\n```c\r\nfloat h = Input.GetAxis(\"Horizontal\");\r\nfloat v = Input.GetAxis(\"Vertical\");\r\n```\r\n\r\n## 鼠标输入\r\n\r\n```c\r\n\r\n```\r\n\r\n## 输出\r\n","commend":0,"watch":0,"evaluate":0,"date":"2022-04-18T17:08:05.563Z"},{"title":"生成","img":"","href":"unity/unity-0/1","des":"# Unity 生成\r\n\r\n## 案例：生成10 个 unity 对象，使用协程\r\n\r\n```c\r\n    void Start()\r\n    {\r\n        StartCoroutine(SpawneEnemy());\r\n    }\r\n\r\n    IEnumerator SpawneEnemy() {\r\n        foreach (Wave wave in waves) {\r\n            for (int i = 0; i < wave.count; i++) {\r\n                // GameObject.Instantiate 接收三个参数， 1. 游戏对象  2. 生成的位置  3. 生成的角度\r\n                GameObject.Instantiate(wave.enemyPrefab, START.position, Quaternion.identity);\r\n                yield return new WaitForSeconds(wave.rate);  // 生产的间隔\r\n     ","commend":0,"watch":0,"evaluate":0,"date":"2022-04-18T17:08:05.563Z"},{"title":"添加点击事件","img":"../../../img/article/2022-02-12-23-08-18.png","href":"unity/unity-0/2","des":"# unity 点击事件\r\n\r\n对于 3d 场景下物品的点击，需要使用到射线方法。\r\n\r\n## 多个重复对象的点击方法\r\n\r\n【1. 添加Layer】<br />\r\n给这些重复的物品添加相同的Layer, 这步最好在物品复制之前完成。\r\n![添加layer](../../../img/article/2022-02-12-23-08-18.png)\r\n\r\n```c\r\nprivate void Update()\r\n{\r\n    if (Input.GetMouseButtonDown(0)) {\r\n        if (EventSystem.current.IsPointerOverGameObject() == false) {\r\n            Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);\r\n            RaycastHit hit;\r\n            bool isCollider = Physics.Raycast(ray,out hit,  1000, LayerMask","commend":0,"watch":0,"evaluate":0,"date":"2022-04-18T17:08:05.563Z"}]}